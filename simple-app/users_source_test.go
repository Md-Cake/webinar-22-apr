// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/md-cake/simple-app (interfaces: UserSource)
//
// Generated by this command:
//
//	mockgen -package main_test -destination users_source_test.go . UserSource
//

// Package main_test is a generated GoMock package.
package main_test

import (
	reflect "reflect"

	simple_app "github.com/md-cake/simple-app"
	gomock "go.uber.org/mock/gomock"
)

// MockUserSource is a mock of UserSource interface.
type MockUserSource struct {
	ctrl     *gomock.Controller
	recorder *MockUserSourceMockRecorder
	isgomock struct{}
}

// MockUserSourceMockRecorder is the mock recorder for MockUserSource.
type MockUserSourceMockRecorder struct {
	mock *MockUserSource
}

// NewMockUserSource creates a new mock instance.
func NewMockUserSource(ctrl *gomock.Controller) *MockUserSource {
	mock := &MockUserSource{ctrl: ctrl}
	mock.recorder = &MockUserSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSource) EXPECT() *MockUserSourceMockRecorder {
	return m.recorder
}

// HasUser mocks base method.
func (m *MockUserSource) HasUser(id int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUser", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasUser indicates an expected call of HasUser.
func (mr *MockUserSourceMockRecorder) HasUser(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUser", reflect.TypeOf((*MockUserSource)(nil).HasUser), id)
}

// RegisterUser mocks base method.
func (m *MockUserSource) RegisterUser(username, email string) (*simple_app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", username, email)
	ret0, _ := ret[0].(*simple_app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserSourceMockRecorder) RegisterUser(username, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUserSource)(nil).RegisterUser), username, email)
}
